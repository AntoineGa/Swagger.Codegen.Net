﻿namespace SomeNamespace
{
    using SomeNamespace.PetEndpoint;
    using SomeNamespace.StoreEndpoint;
    using SomeNamespace.UserEndpoint;
    
    public partial class PetstoreClient
    {
        /// <summary>
        /// This is a sample server Petstore server.  You can find out more about Swagger 
        ///     at <a href="http://swagger.wordnik.com">http://swagger.wordnik.com</a> or on irc.freenode.net, #swagger.  For this sample,
        ///     you can use the api key "special-key" to test the authorization filters
        /// </summary>
        /// <param name="baseUrl">The API base URL.</param>
        public PetstoreClient(string baseUrl = "http://petstore.swagger.wordnik.com/api/api-docs") 
        {
            BaseUrl = baseUrl;
            Pet = new PetClient(baseUrl + "/pet");
            Store = new StoreClient(baseUrl + "/store");
            User = new UserClient(baseUrl + "/user");
        }
    
        /// <summary>
        /// The API base URL.
        /// </summary>
        public string BaseUrl { get; private set; }
        
        /// <summary>
        /// Operations about pets
        /// </summary>
        public PetClient Pet { get; private set; }        
        
        /// <summary>
        /// Operations about store
        /// </summary>
        public StoreClient Store { get; private set; }        
        
        /// <summary>
        /// Operations about user
        /// </summary>
        public UserClient User { get; private set; }        
    }

    namespace PetEndpoint
    {
        using System.Collections.Generic;
        using PetEndpoint.Models;
    
        public partial class PetClient
        {
            /// <summary>
            /// Operations about pets
            /// </summary>
            /// <param name="baseUrl">The endpoint base URL.</param>
            public PetClient(string baseUrl = "http://petstore.swagger.wordnik.com/api/pet") 
            {
                BaseUrl = baseUrl;
            }
    
            /// <summary>
            /// The endpoint base URL.
            /// </summary>
            public string BaseUrl { get; private set; }
    
            /// <summary>
            /// Add a new pet to the store
            /// </summary>
            public void AddPet()
            {
            }    
    
            /// <summary>
            /// Deletes a pet
            /// </summary>
            public void DeletePet()
            {
            }    
    
            /// <summary>
            /// Finds Pets by status
            /// </summary>
            /// <remarks>
            /// Multiple status values can be provided with comma seperated strings
            /// </remarks>
            public IList<Pet> FindPetsByStatus()
            {
            }    
    
            /// <summary>
            /// Finds Pets by tags
            /// </summary>
            /// <remarks>
            /// Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.
            /// </remarks>
            public IList<Pet> FindPetsByTags()
            {
            }    
    
            /// <summary>
            /// Find pet by ID
            /// </summary>
            /// <remarks>
            /// Returns a pet based on ID
            /// </remarks>
            public Pet GetPetById()
            {
            }    
    
            /// <summary>
            /// partial updates to a pet
            /// </summary>
            public IList<Pet> PartialUpdate()
            {
            }    
    
            /// <summary>
            /// Update an existing pet
            /// </summary>
            public void UpdatePet()
            {
            }    
    
            /// <summary>
            /// Updates a pet in the store with form data
            /// </summary>
            public void UpdatePetWithForm()
            {
            }    
    
            /// <summary>
            /// uploads an image
            /// </summary>
            public void UploadFile()
            {
            }    
        }
        
        namespace Models
        {
            public class Tag
            {
                public long Id { get; set ; }
    
                public string Name { get; set ; }
    
            }
    
            public class Pet
            {
                /// <summary>
                /// unique identifier for the pet
                /// </summary>
                public long Id { get; set ; }
    
                public Category Category { get; set ; }
    
                public string Name { get; set ; }
    
                public string PhotoUrls { get; set ; }
    
                public Tag Tags { get; set ; }
    
                /// <summary>
                /// pet status in the store
                /// </summary>
                public string Status { get; set ; }
    
            }
    
            public class Category
            {
                public long Id { get; set ; }
    
                public string Name { get; set ; }
    
            }
    
        }
    }

    namespace StoreEndpoint
    {
        using System.Collections.Generic;
        using StoreEndpoint.Models;
    
        public partial class StoreClient
        {
            /// <summary>
            /// Operations about store
            /// </summary>
            /// <param name="baseUrl">The endpoint base URL.</param>
            public StoreClient(string baseUrl = "http://petstore.swagger.wordnik.com/api/store") 
            {
                BaseUrl = baseUrl;
            }
    
            /// <summary>
            /// The endpoint base URL.
            /// </summary>
            public string BaseUrl { get; private set; }
    
            /// <summary>
            /// Delete purchase order by ID
            /// </summary>
            /// <remarks>
            /// For valid response try integer IDs with value < 1000.  Anything above 1000 or nonintegers will generate API errors
            /// </remarks>
            public void DeleteOrder()
            {
            }    
    
            /// <summary>
            /// Find purchase order by ID
            /// </summary>
            /// <remarks>
            /// For valid response try integer IDs with value <= 5. Anything above 5 or nonintegers will generate API errors
            /// </remarks>
            public Order GetOrderById()
            {
            }    
    
            /// <summary>
            /// Place an order for a pet
            /// </summary>
            public void PlaceOrder()
            {
            }    
        }
        
        namespace Models
        {
            public class Order
            {
                public long Id { get; set ; }
    
                public long PetId { get; set ; }
    
                public integer Quantity { get; set ; }
    
                /// <summary>
                /// Order Status
                /// </summary>
                public string Status { get; set ; }
    
                public DateTime ShipDate { get; set ; }
    
            }
    
        }
    }

    namespace UserEndpoint
    {
        using System.Collections.Generic;
        using UserEndpoint.Models;
    
        public partial class UserClient
        {
            /// <summary>
            /// Operations about user
            /// </summary>
            /// <param name="baseUrl">The endpoint base URL.</param>
            public UserClient(string baseUrl = "http://petstore.swagger.wordnik.com/api/user") 
            {
                BaseUrl = baseUrl;
            }
    
            /// <summary>
            /// The endpoint base URL.
            /// </summary>
            public string BaseUrl { get; private set; }
    
            /// <summary>
            /// Create user
            /// </summary>
            /// <remarks>
            /// This can only be done by the logged in user.
            /// </remarks>
            public void CreateUser()
            {
            }    
    
            /// <summary>
            /// Creates list of users with given input array
            /// </summary>
            public void CreateUsersWithArrayInput()
            {
            }    
    
            /// <summary>
            /// Creates list of users with given list input
            /// </summary>
            public void CreateUsersWithListInput()
            {
            }    
    
            /// <summary>
            /// Delete user
            /// </summary>
            /// <remarks>
            /// This can only be done by the logged in user.
            /// </remarks>
            public void DeleteUser()
            {
            }    
    
            /// <summary>
            /// Get user by user name
            /// </summary>
            public User GetUserByName()
            {
            }    
    
            /// <summary>
            /// Logs user into the system
            /// </summary>
            public String LoginUser()
            {
            }    
    
            /// <summary>
            /// Logs out current logged in user session
            /// </summary>
            public void LogoutUser()
            {
            }    
    
            /// <summary>
            /// Updated user
            /// </summary>
            /// <remarks>
            /// This can only be done by the logged in user.
            /// </remarks>
            public void UpdateUser()
            {
            }    
        }
        
        namespace Models
        {
            public class User
            {
                public long Id { get; set ; }
    
                public string FirstName { get; set ; }
    
                public string Username { get; set ; }
    
                public string LastName { get; set ; }
    
                public string Email { get; set ; }
    
                public string Password { get; set ; }
    
                public string Phone { get; set ; }
    
                /// <summary>
                /// User Status
                /// </summary>
                public integer UserStatus { get; set ; }
    
            }
    
        }
    }
}
